{"version":3,"sources":["constants/constants.ts","api/api.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/CommentsList/CommentsList.tsx","components/Post/Post.tsx","components/PostsList/PostsList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getData","url","fetch","then","response","json","getPrepearedPosts","a","postsUrl","posts","commentUrl","comments","usersUrl","users","PrepearedPosts","map","post","user","find","id","userId","filter","comment","postId","User","name","email","address","city","street","suite","Comment","body","CommentsList","className","key","Post","title","PostsList","onChange","inputValue","htmlFor","type","value","placeholder","App","useState","setPosts","isLoading","setLoading","setValue","filteredPosts","useMemo","toLowerCase","includes","trim","length","event","target","onClick","postsFromServer","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.514bf8e0.chunk.js","sourcesContent":["export const BASE_URL = 'https://jsonplaceholder.typicode.com/';\nexport const POSTS_URL = 'posts';\nexport const USERS_URL = 'users';\nexport const COMMENTS_URL = 'comments';\n","import {\n  BASE_URL,\n  POSTS_URL,\n  USERS_URL,\n  COMMENTS_URL,\n} from '../constants/constants';\n\nconst getData = <T>(url: string): Promise<T> => {\n  return fetch(url)\n    .then(response => response.json());\n};\n\nconst getPosts = (postsUrl: string): Promise<Post[]> => {\n  return getData(`${BASE_URL}${postsUrl}`);\n};\n\nconst getComments = (commentUrl: string): Promise<Comment[]> => {\n  return getData(`${BASE_URL}${commentUrl}`);\n};\n\nconst getUsers = (usersUrl: string): Promise<User[]> => {\n  return getData(`${BASE_URL}${usersUrl}`);\n};\n\nexport const getPrepearedPosts = async (): Promise<PostWithUser[]> => {\n  const posts = await getPosts(POSTS_URL);\n  const comments = await getComments(COMMENTS_URL);\n  const users = await getUsers(USERS_URL);\n  const PrepearedPosts = posts.map(post => ({\n    ...post,\n    user: users.find(user => user.id === post.userId) as User,\n    comments: comments.filter(comment => comment.postId === post.id),\n  }));\n\n  return PrepearedPosts;\n}","import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n\n  return (\n    <>\n      <h3>{`Posted by: ${name}`}</h3>\n      <p>\n        {`Email: ${email}.\n         Address: ${address.city} \n         ${address.street} ${address.suite}`}\n      </p>\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => (\n  <li>\n    <p>{`Comment: ${comment.name}`}</p>\n    <p>{comment.body}</p>\n    <p>{comment.email}</p>\n  </li>\n);\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentsList: FC<Props> = ({ comments }) => (\n  <ul className=\"comments-list\">\n    {comments.map(comment => (\n      <Comment key={comment.id} comment={comment} />\n    ))}\n  </ul>\n);\n","import React, { FC } from 'react';\nimport { User } from '../User/User';\nimport { CommentsList } from '../CommentsList/CommentsList';\n\ninterface Props {\n  post: PostWithUser;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <li className=\"post\">\n      <h2>\n        {title}\n      </h2>\n      <p>{body}</p>\n      <User user={user} />\n      <CommentsList comments={comments} />\n    </li>\n  );\n};\n","import React, { FC, ChangeEvent } from 'react';\nimport { Post } from '../Post/Post';\n\ninterface Props {\n  posts: PostWithUser[];\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  inputValue: string;\n}\n\nexport const PostsList: FC<Props> = ({ posts, onChange, inputValue }) => (\n  <>\n    <form>\n      <label htmlFor=\"search\">\n        Search:\n        <input\n          id=\"search\"\n          name=\"search\"\n          type=\"text\"\n          value={inputValue}\n          onChange={onChange}\n          placeholder=\"enter search word...\"\n        />\n      </label>\n    </form>\n    <ul className=\"posts-container\">\n      {posts.map(post => (\n        <Post key={post.id} post={post} />\n      ))}\n    </ul>\n  </>\n);\n","import React, {\n  FC,\n  useState,\n  ChangeEvent,\n  useMemo,\n} from 'react';\nimport { getPrepearedPosts } from './api/api';\nimport { PostsList } from './components/PostsList/PostsList';\nimport './App.css';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<PostWithUser[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [inputValue, setValue] = useState('');\n\n\n  const loadHandler = () => {\n    setLoading(true);\n    getPrepearedPosts().then(postsFromServer => {\n      setPosts(postsFromServer);\n      setLoading(false);\n    });\n  };\n\n  const changeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  const filteredPosts = useMemo(() => posts.filter(post => {\n    return post.title.toLowerCase().includes(inputValue.trim().toLowerCase())\n      || post.body.toLowerCase().includes(inputValue.trim().toLowerCase());\n  }), [inputValue, posts]);\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      {posts.length\n        ? (\n          <PostsList\n            posts={filteredPosts}\n            onChange={changeHandler}\n            inputValue={inputValue}\n          />\n        )\n        : (\n          <button\n            type=\"button\"\n            onClick={loadHandler}\n            disabled={isLoading}\n          >\n            {isLoading\n              ? 'Loading...'\n              : 'Load Posts'}\n          </button>\n        )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}